initSidebarItems({"constant":[["INTERRUPTED","Sentinel value indicating that wasm has been interrupted."],["VERSION","Version number of this crate."],["WASM32_MAX_PAGES","The number of pages (for 32-bit modules) we can have before we run out of byte index space."],["WASM64_MAX_PAGES","The number of pages (for 64-bit modules) we can have before we run out of byte index space."],["WASM_PAGE_SIZE","WebAssembly page sizes are defined to be 64KiB."]],"enum":[["CompileError","An error while compiling WebAssembly to machine code."],["FlagValue","Value of a configured setting for a [`Compiler`]"],["Initializer","Initialization routines for creating an instance, encompassing imports, modules, instances, aliases, etc."],["MemoryInitialization","The type of WebAssembly linear memory initialization to use for a module."],["MemoryStyle","Implemenation styles for WebAssembly linear memory."],["ModuleMemoryOffset","Memory definition offset in the VMContext structure."],["ModuleType","Different types that can appear in a module."],["ModuleUpvar","Where module values can come from when creating a new module from a compiled artifact."],["RelocationTarget","Destination function. Can be either user function or some special one, like `memory.grow`."],["SettingKind","Different kinds of [`Setting`] values that can be configured in a [`CompilerBuilder`]"],["TableStyle","Implementation styles for WebAssembly tables."]],"fn":[["reference_type","Returns the reference type to use for the provided wasm type."]],"macro":[["for_each_libcall","Iterates through all `LibCall` members and all runtime exported functions."],["foreach_builtin_function","Helper macro to iterate over all builtin functions and their signatures."]],"mod":[["entity",""],["ir",""],["obj","Utilities for working with object files that operate as Wasmtimeâ€™s serialization and intermediate format for compiled modules."],["wasm",""]],"struct":[["BuiltinFunctionIndex","An index type for builtin functions."],["CompiledFunction","Compiled function: machine code body, jump table offsets, and unwind information."],["DebugInfoData",""],["FunctionAddressMap","Function and its instructions addresses mappings."],["FunctionBodyData","Contains function data: byte code and its offset in the module."],["FunctionMetadata",""],["HostPtr","Type representing the size of a pointer for the current compilation host"],["InstanceSignature","The type signature of known instances."],["InstructionAddressMap","Single source location to generated address mapping."],["MemoryInitializer","A WebAssembly linear memory initializer."],["MemoryPlan","A WebAssembly linear memory description along with our chosen style for implementing it."],["Module","A translated WebAssembly module, excluding the function bodies and memory initializers."],["ModuleEnvironment","Object containing the standalone environment information."],["ModuleSignature","The type signature of known modules."],["ModuleTranslation","The result of translating via `ModuleEnvironment`. Function bodies are not yet translated, and data initializers have not yet been copied out of the original buffer."],["NameSection",""],["Relocation","A record of a relocation to perform."],["Setting","Description of compiler settings returned by [`CompilerBuilder::settings`]."],["StackMapInformation","The offset within a function of a GC safepoint, and its associated stack map."],["TableInitializer","A WebAssembly table initializer."],["TablePlan","A WebAssembly table description along with our chosen style for implementing it."],["TargetSharedSignatureIndex","Target specific type for shared signature index."],["TrapInformation","Information about trap."],["Tunables","Tunable parameters for WebAssembly compilation."],["TypeTables","All types which are recorded for the entirety of a translation."],["VMOffsets","This class computes offsets to fields within `VMContext` and other related structs that JIT code accesses directly."],["VMOffsetsFields","Used to construct a `VMOffsets`"],["WasmFileInfo",""]],"trait":[["Compiler","An implementation of a compiler which can compile WebAssembly functions to machine code and perform other miscellaneous tasks needed by the JIT runtime."],["CompilerBuilder","Abstract trait representing the ability to create a `Compiler` below."],["PtrSize","Trait used for the `ptr` representation of the field of `VMOffsets`"]],"type":[["CompiledFunctions",""],["Dwarf",""]]});